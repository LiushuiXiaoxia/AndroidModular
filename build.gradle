// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        google()
        mavenCentral()
        mavenLocal()
        maven { url "https://jitpack.io" }
        // maven { url uri("${project.rootDir.absolutePath}/repo") }
    }

    dependencies {
        classpath libs.plugins.androidBuild.get().toString()
        classpath libs.plugins.kotlinBuild.get().toString()
        // classpath "com.android.tools.build:gradle:$gradle_version"
        // classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // classpath "cn.mycommons:ImplementsTransformPlugin:$LIB_VERSION"

        // classpath 'com.android.tools:r8:4.0.48'
        // classpath 'com.android.tools:r8:8.0.40'

        if (Boolean.parseBoolean(PLUGIN_DEV)) {
            classpath "cn.mycommons:module-plugin"
        }
    }
}

allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        google()
        mavenLocal()
        mavenCentral()
        maven { url "https://jitpack.io" }
        // maven { url uri("${project.rootDir.absolutePath}/repo") }
    }
}

gradle.addListener(new TaskActionListener() {

    @Override
    void beforeActions(Task task) {
        def name = task.name
        if (name.startsWith("dexBuilder")) {
            for (def f in task.inputs.files.files) {
                logger.quiet("${name}.inputs: $f")
            }
        }
    }

    @Override
    void afterActions(Task task) {
        def name = task.name
        if (name.startsWith("dexBuilder")) {
            for (def f in task.outputs.files.files) {
                logger.quiet("${name}.outputs: $f")
            }
        }
    }
})

task clean(type: Delete) {
    delete rootProject.buildDir
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}